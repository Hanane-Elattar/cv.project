<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>



//CVPreview.js

import React from 'react';
import './view.css';

function CVPreview({ formData }) {
    return (
        <div id="cv-preview">
            <h2>{formData.firstName} {formData.lastName}</h2>
            
            {formData.profilePic && (
                <div className="profile-pic-container">
                    <img 
                        src={URL.createObjectURL(formData.profilePic)} 
                        alt="Profile" 
                        className="profile-pic" 
                    />
                </div>
            )}
            {formData.titre && <h3 className="title">{formData.titre}</h3>}
            <p className="section">
                {formData.address} <br/> {formData.phone} <br/> {formData.email}
            </p>

            {formData.experience && (
                <div className="section">
                    <h3 className="section-title">Experience</h3>
                    <p>{formData.experience}</p>
                </div>
            )}

           
            {formData.formation && (
                <div className="section">
                    <h3 className="section-title">Formation</h3>
                    <p>{formData.formation}</p>
                </div>
            )}

            
            {formData.skills && (
                <div className="section">
                    <h3 className="section-title">Skills</h3>
                    <p>{formData.skills}</p>
                </div>
            )}

            
            {formData.software && (
                <div className="section">
                    <h3 className="section-title">Software</h3>
                    <p>{formData.software}</p>
                </div>
            )}

            
            {formData.language && (
                <div className="section">
                    <h3 className="section-title">Language</h3>
                    <p>{formData.language}</p>
                </div>
            )}
        </div>
    );
}

export default CVPreview;

//Form.js

import React, { useState } from 'react';
import CVPreview from './CVPreview';
import './Form.css';

function Form() {
    const [formData, setFormData] = useState({
        profilePic: null,
        firstName: '',
        lastName: '',
        titre: '',  
        phone: '',
        address: '',
        email: '',
        experience: '',
        formation: '',
        software: '',
        skills: '',
        language: '',
    });

    const [showPreview, setShowPreview] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

    const handleFileChange = (e) => {
        setFormData({ ...formData, profilePic: e.target.files[0] });
    };

    const handlePreview = () => {
        setShowPreview(true);
    };

    return (
        <div>
            <form>
                <h2>Formulaire CV</h2>
                <label className="custom-file-label" htmlFor="profilePic">
                        Upload Profile Picture
                    <input type="file" name="profilePic" id="profilePic"  onChange={handleFileChange} />
                </label>

                <input
                    type="text"
                    name="firstName"
                    placeholder="First Name"
                    value={formData.firstName}
                    onChange={handleChange}
                />

                <input
                    type="text"
                    name="lastName"
                    placeholder="Last Name"
                    value={formData.lastName}
                    onChange={handleChange}
                />
                
                
                <input
                    type="text"
                    name="titre"
                    placeholder="About you"
                    value={formData.titre}
                    onChange={handleChange}
                />

                <input
                    type="tel"
                    name="phone"
                    placeholder="Phone"
                    value={formData.phone}
                    onChange={handleChange}
                />

                <input
                    type="text"
                    name="address"
                    placeholder="Adresse"
                    value={formData.address}
                    onChange={handleChange}
                />

                <input
                    type="email"
                    name="email"
                    placeholder="Email"
                    value={formData.email}
                    onChange={handleChange}
                />

                <textarea
                    name="experience"
                    placeholder="Experience"
                    value={formData.experience}
                    onChange={handleChange}
                />

                <textarea
                    name="formation"
                    placeholder="Formation"
                    value={formData.formation}
                    onChange={handleChange}
                />

                <textarea
                    name="software"
                    placeholder="Soft Ware"
                    value={formData.software}
                    onChange={handleChange}
                />

                <textarea
                    name="skills"
                    placeholder="Skills"
                    value={formData.skills}
                    onChange={handleChange}
                />

                <textarea
                    name="language"
                    placeholder="Language"
                    value={formData.language}
                    onChange={handleChange}
                />

                <button type="button" onClick={handlePreview}>
                    View
                </button>
            </form>

            {showPreview && <CVPreview formData={formData} />}
        </div>
    );
}

export default Form;

//downloadPDF.js

import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

function downloadPDF() {
    const input = document.getElementById('cv-preview');
    html2canvas(input).then((canvas) => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF();
        pdf.addImage(imgData, 'PNG', 0, 0);
        pdf.save("cv.pdf");
    });
}

//app.js

import React, { useState } from 'react';
import Form from './Form';
import CVPreview from './CVPreview';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import './App.css';

function App() {
    const [formData, setFormData] = useState({
        firstName: '',
        lastName: '',
        titre: '',
        address: '',
        phone: '',
        email: '',
        experience: '',
        formation: '',
        software: '',
        skills: '',
        language: ''
    });

    const handleSubmit = (data) => {
        setFormData(data);  
    };

    const downloadPDF = () => {
        const input = document.getElementById('cv-preview');
        html2canvas(input, { scale: 2 }).then((canvas) => {
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4'); 
            const imgWidth = pdf.internal.pageSize.getWidth(); 
            const pageHeight = pdf.internal.pageSize.getHeight(); 
            const imgHeight = canvas.height * imgWidth / canvas.width;
            let heightLeft = imgHeight;
            let position = 0;

            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;

            while (heightLeft >= 0) {
                position = heightLeft - imgHeight;
                pdf.addPage();
                pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
            }

            pdf.save("cv.pdf");
        });
    };

    return (
        <div id="app-container">
            <Form handleSubmit={handleSubmit} />
            <CVPreview formData={formData} />
            <button onClick={downloadPDF}>Download in PDF</button>
        </div>
    );
}

export default App;

